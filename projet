#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#define nb_date 365
#define Max_Matricule 20

typedef struct {
    int j;
    int m;
} date;

typedef struct  {
    char disc[512];
    char etat[512];
    char matr[Max_Matricule];
    int id;
    struct voiture *suiv;
} voiture;

voiture *head_voiture = NULL;

typedef struct  {
    int id;
    date d;
    struct location *suiv;
} location;

location *head_location = NULL;

void ajouterv(int id) {
    voiture *nouvelle_voiture = (voiture *)malloc(sizeof(voiture));
    if (nouvelle_voiture == NULL) {
        puts("Erreur d'allocation mémoire");
        return;
    }
    nouvelle_voiture->id = id;
    puts("Donner la description du voiture :");
    scanf("%s", nouvelle_voiture->disc);
    puts("Donner l'etat du voiture :");
    scanf("%s", nouvelle_voiture->etat);
    puts("Donner la matricule du voiture :");
    scanf("%s", nouvelle_voiture->matr);
    nouvelle_voiture->suiv = head_voiture;
    head_voiture = nouvelle_voiture;
    puts("---------------Votre voiture a été ajoutée avec succès---------------------");
}

void afficher_discription(int id) {
    voiture *temp = head_voiture;
    while (temp != NULL) {
        if (temp->id == id ) {
            puts(temp->disc);
            return;
        }
        temp = temp->suiv;
    }
    puts("ID non valide");
}

void afficher_etat(int id) {
    voiture *temp = head_voiture;
    while (temp != NULL) {
        if (temp->id == id ) {
            puts(temp->etat);
            return;
        }
        temp = temp->suiv;
    }
    puts("ID non valide");
}

void supprimerv(int id) {
    voiture **temp = &head_voiture;
    while (*temp != NULL) {
        if ((*temp)->id == id ) {
            voiture *toDelete = *temp;
            *temp = (*temp)->suiv;
            free(toDelete);
            puts("La voiture a été supprimée avec succès");
            return;
        }
        temp = &(*temp)->suiv;
    }
    puts("ID non valide");
}

location* louerv(int id, date da) {
    voiture *v = head_voiture;
    while (v != NULL) {
        if (v->id == id && !strcmp(v->etat, "disponible")) {
            location *nouvelle_location = (location *)malloc(sizeof(location));
            if (nouvelle_location == NULL) {
                puts("Erreur d'allocation mémoire");
                return head_location;
            }
            nouvelle_location->d = da;
            nouvelle_location->id = id;
            nouvelle_location->suiv = head_location;
            head_location = nouvelle_location;
            puts("La voiture a été louée avec succès ");
            return head_location;
        }
        v = v->suiv;
    }
    puts("Voiture n'est pas valable ou indisponible");
    return head_location;
}

void afficherHISTORIQUEjpj(date d) {
    location *temp = head_location;
    int found = 0;
    while (temp != NULL) {
        if (temp->d.j == d.j && temp->d.m == d.m) {
            printf("Location le %d/%d : Voiture %d\n", temp->d.j, temp->d.m, temp->id);
            found = 1;
        }
        temp = temp->suiv;
    }
    if (!found)
        puts("Aucune opération de location pour cette date");
}

void afficherHISTORIQUEmpm(date d) {
    location *temp = head_location;
    int found = 0;
    while (temp != NULL) {
        if (temp->d.m == d.m) {
            printf("Location le %d/%d : Voiture %d\n", temp->d.j, temp->d.m, temp->id);
            found = 1;
        }
        temp = temp->suiv;
    }
    if (!found)
        puts("Aucune opération de location pour ce mois");
}

bool estDateValide(int jour, int mois) {
    if (mois < 1 || mois > 12 || jour < 1 || jour > 31) return false;
    if (mois == 2) return jour <= 29 ; 
    if (mois == 4 || mois == 6 || mois == 9 || mois == 11) return jour <= 30;
    return true;
}

int main() {
    int choix;
    bool end = true  ;
    while( end ){
    puts("-------------------------------------------------");
    puts("Bienvenue dans le menu de notre application  ");
    puts("1- Ajouter une voiture.");
    puts("2- Ajouter plusieurs voitures.");
    puts("3- Supprimer une voiture.");
    puts("4- Louer une voiture ");
    puts("5- Afficher l'historique pour une date donnée.");
    puts("6- Afficher l'historique pour un mois donné.");
    puts("7- Quitter l'application");
    puts("Votre choix:");

    scanf("%d", &choix);

    switch (choix) {
        case 1:
        {
            puts("Donner l'ID de la voiture que vous souhaitez ajouter");
            int id;
            scanf("%d", &id);
            ajouterv(id);
            break;
        }
       case 2 :
       {
           puts("donner le nombre des voitures ");
           int nbrv;
           scanf("%d",&nbrv);
           for(int i=0;i<nbrv;i++){
               puts("Donner l'ID de la voiture que vous souhaitez ajouter");
                int id;
                scanf("%d", &id);
                ajouterv(id);
           }
       }
       case 3 :
       {
           puts("Donner l'ID de la voiture que vous souhaitez supprimer :");
            int idSuppression;
            scanf("%d", &idSuppression);
            supprimerv(idSuppression);
            break;
       }
       case 4 :
       {
           puts("Donner l'ID de la voiture que vous souhaitez louer :");
            int idLocation;
            scanf("%d", &idLocation);
            date d;
            puts("Donner le jour de la location :");
            scanf("%d", &d.j);
            puts("Donner le mois de la location :");
            scanf("%d", &d.m);
            if (estDateValide(d.j, d.m)) head_location = louerv(idLocation, d);
            else puts("Date non valide") ;
            break;
       }
       case 5 :
       {
            date d;
            puts("Donner le jour pour afficher l'historique :");
            scanf("%d", &d.j);
            puts("Donner le mois pour afficher l'historique :");
            scanf("%d", &d.m);
            afficherHISTORIQUEjpj(d);
            break;
       }
       case 6 :
       {
            date d;
            puts("Donner le mois pour afficher l'historique :");
            scanf("%d", &d.m);
            afficherHISTORIQUEmpm(d);
            break;
       }
       case 7 :
       {
           puts("-----------------Fermeture du programme-----------------");
           end=false;
       }

        default:
            puts("Choix non valide");
            break;
    }
    }

    return 0;
}
